
// map is used for changing/transforming the input .Can change the type as well.
// map blocks next item if current item is taking some time. But flatMap will run all the
// items as new Observable so it wont be blocked.
// filter is used to reduce no. of items send to subscriber

// 1. Flat Map for emiting more items than the input/ Also can modify the input by giving new Observable .
// 2. Flat Map does emit asynchronously without blocking.
// FIRST will throw a NoSuchElementException while TAKEFIRST will return an empty Observable (one that calls onCompleted but never calls onNext).
// The SAMPLE operator periodically looks at an Observable and emits whichever item it has most RECENTLY EMITTED since the previous sampling. but
// THROTTLEFIRST emits the first in interval.
// DEBOUNCE for a particular interval. will emit most recent in a given time period.  DISTINCT function

// Merge will merge . Concat will append in the end. StartWith will prepend at start.

//flatMap should be used when all results matter, regardless of their timing, and switchMap should be used when only results from the last Observable matter.

. DEFER -> do not create the Observable until the observer subscribes, and create a FRESH Observable for each observer.
It wont execute the observable until it is subscribed.

. AMB -> given two or more source Observables, emit all of the items from only the first of these Observables to emit an item or notification

. Compose -> used to change the original Stream instantaneously but FLATMAP will compose newly on every
item onNext method ONLY . So use compose for observeOn/SubscribeOn kind which should effect whole stream.


************ Subjects *************
See http://reactivex.io/documentation/subject.html
All below with 2 subscribers A , B (subscribed after A & after 1,2 already send before) ;
With input sequence 1,2,3,4

1. AsyncSubject -> Emits the last value (and only the last value) emitted by the source Observable, and only after that source Observable completes.
2. BehaviourSubject -> Emit the recent Value ( if not emited yet will return default value) & future values.
3. PublishSubject -> Emit only the future values ( won't take previously pushed values )
4. ReplaySubject -> Emits All ITEMS to all subscribers regardless of when they subscribed.

************************************
